[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"/articles/VoCC.html","id":"example-1-prediction-of-biogeographical-shifts","dir":"Articles","previous_headings":"","what":"Example 1: Prediction of biogeographical shifts","title":"VoCC","text":"look first “marshift” global data set containing reported range shifts marine species corresponding given periods time. Next, calculate gradient- distance-based velocities (1960-2009), using HadiSST data set, later extract corresponding values observed shift. Next, extract mean velocity estimates reported shift taking average grid cell values within circle radius equal reported range-shift distance. used fit simple linear regression models observed range shifts climate velocity. Distance-based velocities strictly positive definition, compare like like change first sign negative present local climates warmer future analogues. Produce observed vs predicted scatterplots regression lines (Fig. 2 Garcia Molinos et al. 2019).","code":"str(marshift) #> 'data.frame':    343 obs. of  6 variables: #>  $ lat       : num  49.7 53.8 53.8 40 43 ... #>  $ long      : num  -4.33 5 5 1 -9.3 -1.4 -9.3 -71.7 -71.7 -71.7 ... #>  $ timespan  : int  30 40 40 55 35 35 84 39 26 54 ... #>  $ years_data: int  23 40 40 15 4 2 5 2 2 2 ... #>  $ taxa      : Factor w/ 12 levels \"Benthic algae\",..: 6 6 6 6 3 3 4 5 5 5 ... #>  $ Shift     : num  536.1 65.6 95.9 40 10 ... HadiSST <- terra::rast(system.file(\"extdata\", \"HadiSST.tif\", package = \"VoCCdata\"))  # monthly to annual averages r <- sumSeries(HadiSST, p = \"1960-01/2009-12\", yr0 = \"1955-01-01\",                 l = terra::nlyr(HadiSST),                 fun = function(x) colMeans(x, na.rm = TRUE),                 freqin = \"months\", freqout = \"years\")  vt <- tempTrend(r, th = 10) # temporal trend vg <- spatGrad(r, th = 0.0001, projected = FALSE) # spatial gradient gv <- gVoCC(vt, vg) # climate velocity  # Now the distance-based velocities # Take 1960-1970 as base period against 2000-2009 r2 <- c(terra::mean(r[[1:10]], na.rm = TRUE), terra::mean(r[[41:50]], na.rm = TRUE))  # prepare the data frame with the necessary variables clim <- na.omit(data.frame(terra::values(r2), cid = 1:terra::ncell(r)))  clim[, c(\"x\", \"y\")] <- terra::xyFromCell(r, clim$cid)  # 1965-2004 (40 yr), 500 km search radius v <- dVoCC(clim, n = 1, tdiff = 40, method = \"Single\", climTol = 0.1, geoTol = 500, distfun = \"GreatCircle\", trans = NA, lonlat = TRUE) # Change sign as needed and create the distance-based velocity raster # Change sign as needed - terra approach for value comparison focal_vals <- terra::values(r2[[1]])[v$focal] target_vals <- terra::values(r2[[2]])[v$target] ind <- which(focal_vals > target_vals) v$velBis <- v$vel v$velBis[ind] <- v$vel[ind] * -1  # put output in raster format - create single layer empty template like raster(gv) dv <- terra::rast(terra::ext(gv), resolution = terra::res(gv), crs = terra::crs(gv)) dv[v$focal] <- v$velBis  # Create point geometries and buffer them coords <- terra::vect(cbind(marshift$long, marshift$lat), crs = \"EPSG:4326\") buffer_size <- marshift$Shift * (marshift$timespan / 10) * 1000  # Get the mean velocity within the buffer for each data point. # Match old raster::extract approach exactly marshift$GV <- terra::extract(abs(gv[[1]]), coords,                               buffer = buffer_size,                               fun = mean, na.rm = TRUE,                               weights = TRUE, exact = FALSE)[,2]  marshift$DV <- terra::extract(abs(dv), coords,                               buffer = buffer_size,                               fun = mean, na.rm = TRUE,                               weights = TRUE, exact = FALSE)[,2] # For points that didn't get values (NA), find nearest valid cells  missing_points <- coords[is.na(marshift$GV)] # Identify NAs if(!is.empty(missing_points)){   marine_cells <- terra::as.points(gv[[1]]) # vector of all valid marine cell locations.   nearest_indices <- terra::nearest(missing_points, marine_cells) # Find the nearest marine cell   nearest_values <- terra::extract(gv[[1]], marine_cells[nearest_indices]) # get the values from the nearest marine cells.   marshift$GV[is.na(marshift$GV)] <- nearest_values[, 2] # Replace the NA values in `marshift$GV` }  missing_points <- coords[is.na(marshift$DV)] # Identify NAs if(!is.empty(missing_points)){   marine_cells <- terra::as.points(dv[[1]]) # vector of all valid marine cell locations.   nearest_cells <- terra::nearest(missing_points, marine_cells) # Find the nearest marine cell   nearest_values <- terra::extract(dv[[1]], nearest_cells) # get the values from the nearest marine cells.   marshift$DV[is.na(marshift$DV)] <- nearest_values[, 2] # Replace the NA values in `marshift$GV` } # fit the regression models Mgv <- lm(Shift^(1 / 4) ~ I((GV * 10)^(1 / 4)), data = marshift, weights = years_data) summary(Mgv) #>  #> Call: #> lm(formula = Shift^(1/4) ~ I((GV * 10)^(1/4)), data = marshift,  #>     weights = years_data) #>  #> Weighted Residuals: #>     Min      1Q  Median      3Q     Max  #> -8.7627 -2.3540 -0.5463  1.5966 14.8297  #>  #> Coefficients: #>                    Estimate Std. Error t value Pr(>|t|)     #> (Intercept)         1.20025    0.23469   5.114 5.28e-07 *** #> I((GV * 10)^(1/4))  0.50348    0.09599   5.245 2.75e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 3.865 on 340 degrees of freedom #>   (1 observation deleted due to missingness) #> Multiple R-squared:  0.07486,    Adjusted R-squared:  0.07214  #> F-statistic: 27.51 on 1 and 340 DF,  p-value: 2.75e-07 Mdv <- lm(Shift^(1 / 4) ~ I((DV * 10)^(1 / 4)), data = marshift, weights = years_data) summary(Mdv) #>  #> Call: #> lm(formula = Shift^(1/4) ~ I((DV * 10)^(1/4)), data = marshift,  #>     weights = years_data) #>  #> Weighted Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.1097 -2.3602 -0.7524  1.6379 15.2653  #>  #> Coefficients: #>                    Estimate Std. Error t value Pr(>|t|)     #> (Intercept)          0.8565     0.3371   2.541   0.0115 *   #> I((DV * 10)^(1/4))   0.6192     0.1335   4.636 5.07e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 3.904 on 338 degrees of freedom #>   (3 observations deleted due to missingness) #> Multiple R-squared:  0.05979,    Adjusted R-squared:  0.05701  #> F-statistic:  21.5 on 1 and 338 DF,  p-value: 5.074e-06 # first compare both velocities  p1 <- ggplot() +    geom_spatraster(data = gv[[1]]) +    scale_fill_distiller(palette = \"RdBu\", direction = -1, limits = c(-50, 50)) +   ggtitle(\"Gradient-based vocc\") +   scale_x_continuous(expand = c(0,0)) +    scale_y_continuous(expand = c(0,0))  p2 <- ggplot() +    geom_spatraster(data = dv[[1]]) +    scale_fill_distiller(palette = \"RdBu\", direction = -1, limits = c(-20, 20)) +   ggtitle(\"Distance-based vocc\") +   scale_x_continuous(expand = c(0,0)) +    scale_y_continuous(expand = c(0,0))  wrap_plots(p1, p2, ncol = 1) # scatter plots with the resulting regression line p1 <- ggplot(na.omit(marshift), aes(x = (GV * 10)^(1 / 4), y = Shift^(1 / 4))) +   geom_point(color = \"grey\") +   geom_smooth(method = lm, se = FALSE) +   theme_classic() +   scale_color_brewer(palette = \"Accent\") +   labs(x = \"Predicted shift (x^1/4; km/yr)\", y = \"Observed shift (y^1/4; km/yr)\")  p2 <- ggplot(na.omit(marshift), aes(x = (DV * 10)^(1 / 4), y = Shift^(1 / 4))) +   geom_point(color = \"grey\") +   geom_smooth(method = lm, se = FALSE) +   theme_classic() +   scale_color_brewer(palette = \"Accent\") +   labs(x = \"Predicted shift (x^1/4; km/yr)\", y = \"Observed shift (y^1/4; km/yr)\")  wrap_plots(p1, p2, nrow = 1) #> `geom_smooth()` using formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x' #> Warning: Removed 2 rows containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"/articles/VoCC.html","id":"example-2-analysis-of-climate-exposure-and-connectivity-in-the-western-pacific-ocean","dir":"Articles","previous_headings":"","what":"Example 2: Analysis of climate exposure and connectivity in the Western Pacific Ocean","title":"VoCC","text":"example use climate velocity trajectories (based 1960-2009 mean annual SST) analyse climate connectivity Western Pacific region calculate residence time corresponding exclusive economic zones region index climatic exposure. First, arrange raster layers analysis. can now populate data frame cell centroid coordinates trajectories. Let’s calculate trajectories parallel processing demonstrate can used speed things (especially useful dealing fine resolutions large extents). Plot climate velocities EEZ polygons EEZs data set (Fig. 3a Garcia Molinos et al. 2019)  now calculate trajectory classes residence times EEZ using traj25 data set. Finally let’s plot category proportions pie charts top EEZ, size chart proportional respective residence time (Fig. 3b Garcia Molinos et al. 2019).","code":"# prepare raster layers vel <- gv[[1]] ang <- gv[[2]] mn <- terra::app(r, mean, na.rm = T)  # generate a velocity layer centered and cropped to study region to extract the initial coordinates for the trajectories from x1 <- terra::crop(gv[[1]], terra::ext(-180, 0, -90, 90)) x2 <- terra::crop(gv[[1]], terra::ext(0, 180, -90, 90)) terra::ext(x1) <- c(180, 360, -90, 90) velc <- terra::merge(x1, x2)  # crop to the desired extent # display restricted to +180 longitude to avoid plotting issues with date line crossing velc <- terra::crop(velc, c(90, 180, -32, 33)) lonlat <- data.frame(terra::xyFromCell(velc, 1:ncell(velc))) lonlat$vel <- terra::extract(vel, lonlat, ID = FALSE) lonlat$ang <- terra::extract(ang, lonlat[, 1:2], ID = FALSE) lonlat$mn <- terra::extract(mn, lonlat[, 1:2], ID = FALSE) lonlat$lineID <- 1:nrow(lonlat) lonlat <- drop_na(lonlat) traj <- voccTraj(lonlat, vel, ang, mn, x_res = terra::res(vel)[1], y_res = terra::res(vel)[2], tyr = 50, tstep = 1/12) # create the spatial object with the trajectories and plot them together with the EEZ polygons lns <- trajLine(traj)  # mirai::daemons(0) # Set daemons to 0 to close cluster   # Load and simplify polygons to speed plotting up EEZs <- sf::st_read(system.file(\"extdata\", \"EEZs.gpkg\", package = \"VoCCdata\")) %>%    sf::st_break_antimeridian() %>%    sf::st_simplify(preserveTopology = TRUE, dTolerance = 500) %>%    sf::st_crop(xmin = 75, xmax = 180, ymin = -35, ymax = 35) #> Reading layer `EEZs' from data source  #>   `/Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/library/VoCCdata/extdata/EEZs.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 35 features and 22 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -179.9999 ymin: -31.24447 xmax: 179.9999 ymax: 31.79787 #> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs  ggplot() +    geom_spatraster(data = velc, aes(fill = voccMag)) +   scale_fill_viridis_c(option = \"inferno\", name = \"Velocity\") +   geom_sf(data = lns %>% sf::st_shift_longitude(), colour = \"grey70\", linewidth = 0.1) +   geom_sf(data = EEZs %>% sf::st_shift_longitude(), colour = \"white\", fill = NA, linewidth = 0.3) +   scale_x_continuous(expand = c(0, 0)) +   scale_y_continuous(expand = c(0, 0)) # classify trajectories (16 trajectories starting from each 1-deg cell cell) clas <- trajClas(traj25, vel, ang, mn, trajSt = 16, tyr = 50, nmL = 20, smL = 100, Nend = 45, Nst = 15, NFT = 70)  # Extract proportions by categories for each EEZ v <- data.table(terra::extract(clas[[7]], EEZs, df = TRUE)) v[, TrajClas := as.character(TrajClas)] v[, ID := as.ordered(ID)]  # proportions by class d <- prop.table(table(v), 1)  # residence times by EEZ EEZa <- resTime(EEZs, vel, areapg = NA) D <- data.table(d) # put data in long format  D[, name := as.character(EEZs$Territory1)[as.numeric(ID)]] # add EEZ names for reference D[, RT := as.character(EEZa$resTim)[as.numeric(ID)]]  # prepare data frame to plot the pie charts with dt <- as.data.frame.matrix(d) dt$country <- as.character(EEZs$Territory1)  coords <- sf::st_coordinates(sf::st_centroid(EEZs)) dt[, c(\"x\", \"y\")] <- coords[, c(\"X\", \"Y\")] dt$RT <- EEZa$resTim  # # generate the plot plot(velc) plot(eez_simp, add = TRUE) mycol <- c(scales::alpha(rgb(192, 192, 192, maxColorValue = 255), 0.5), scales::alpha(rgb(204, 255, 204, maxColorValue = 255), 0.5), scales::alpha(rgb(255, 153, 51, maxColorValue = 255), 0.5), scales::alpha(rgb(255, 51, 51, maxColorValue = 255), 0.5), scales::alpha(rgb(51, 51, 255, maxColorValue = 255), 0.5), scales::alpha(rgb(204, 102, 0, maxColorValue = 255), 0.5), scales::alpha(rgb(204, 0, 204, maxColorValue = 255), 0.5), scales::alpha(rgb(255, 255, 51, maxColorValue = 255), 0.5), scales::alpha(rgb(153, 204, 255, maxColorValue = 255), 0.5)) # mylab = c(\"Non-moving\", \"Slow-moving\", \"Internal Sink\", \"Boundary sink\", #         \"Source\", \"Internal sink\",\"Corridor\", \"Divergence\", \"Convergence\") for (i in 1:35) {   add.pie(z = as.numeric(dt[i, 1:5]), x = dt[i, \"x\"], y = dt[i, \"y\"], radius = log(dt[i, \"RT\"]), col = mycol, labels = \"\") }"},{"path":"/articles/VoCC.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"VoCC","text":"García Molinos, J., Schoeman, D. S., Brown, C. J. Burrows, M. T. (2019), VoCC: R package calculating velocity climate change related climatic metrics. Methods Ecol Evol. doi:10.1111/2041-210X.13295","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jorge Garcia Molinos. Author, maintainer. David S. Schoeman. Author. Christopher J. Brown. Author. Michael T. Burrows. Author. Naoki H. Kumagai. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Garcia Molinos J, S. Schoeman D, J. Brown C, T. Burrows M (2025). VoCC: Velocity Climate Change related climatic metrics. R package version 0.0.1, https://mathmarecol.github.io/VoCC/.","code":"@Manual{,   title = {VoCC: The Velocity of Climate Change and related climatic metrics},   author = {Jorge {Garcia Molinos} and David {S. Schoeman} and Christopher {J. Brown} and Michael {T. Burrows}},   year = {2025},   note = {R package version 0.0.1},   url = {https://mathmarecol.github.io/VoCC/}, }"},{"path":"/index.html","id":"vocc-the-velocity-of-climate-change-and-related-climatic-metrics","dir":"","previous_headings":"","what":"The Velocity of Climate Change and related climatic metrics","title":"The Velocity of Climate Change and related climatic metrics","text":"Jorge Garcia Molinos et al. 18 July 2019 package now release version (v 1.0.0). Please contact questions feed-back.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Velocity of Climate Change and related climatic metrics","text":"can install development version VoCC GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JorGarMol/VoCC\")"},{"path":[]},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"The Velocity of Climate Change and related climatic metrics","text":"cite package please use: García Molinos, J., Schoeman, D. S., Brown, C. J. Burrows, M. T. (2019). VoCC: Velocity Climate Change related climatic metrics. R package version 1.0.0. https://doi.org/10.5281/zenodo.3382092 following paper explains package functionality provides examples covered code package vignette García Molinos, J., Schoeman, D. S., Brown, C. J. Burrows, M. T. (2019), VoCC: R package calculating velocity climate change related climatic metrics. Methods Ecol Evol. doi:10.1111/2041-210X.13295","code":""},{"path":"/reference/EEZ.html","id":null,"dir":"Reference","previous_headings":"","what":"Icelandic Exclusive Economic Zone (EEZ) — EEZ","title":"Icelandic Exclusive Economic Zone (EEZ) — EEZ","text":"Icelandic Exclusive Economic Zone (v10).","code":""},{"path":"/reference/EEZ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Icelandic Exclusive Economic Zone (EEZ) — EEZ","text":"spatial polygon data frame containing Icenalndic EEZ (200 NM).","code":""},{"path":"/reference/EEZ.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Icelandic Exclusive Economic Zone (EEZ) — EEZ","text":"Marineregions.org http://www.marineregions.org/downloads.php","code":""},{"path":"/reference/HSST.html","id":null,"dir":"Reference","previous_headings":"","what":"Monthly mean sea surface temperatures (SST) around Iceland for 1955-2010 — HSST","title":"Monthly mean sea surface temperatures (SST) around Iceland for 1955-2010 — HSST","text":"Monthly mean sea surface temperatures (SST) around Iceland 1955-2010","code":""},{"path":"/reference/HSST.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Monthly mean sea surface temperatures (SST) around Iceland for 1955-2010 — HSST","text":"raster stack 672 layers containing mean monthly SSTs (C) 1-deg resolution period Jan 1955 Dec 2010 Atlantic waters surrounding Iceland.","code":""},{"path":"/reference/HSST.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Monthly mean sea surface temperatures (SST) around Iceland for 1955-2010 — HSST","text":"Hadley Centre data set HadISST 1.1 (data accessed May 2018).","code":""},{"path":"/reference/HSST.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monthly mean sea surface temperatures (SST) around Iceland for 1955-2010 — HSST","text":"Rayner et al. 2003. Global analyses sea surface temperature, sea ice, night marine air temperature since late nineteenth century. J. Geophys. Res.Vol. 108: 4407.","code":""},{"path":"/reference/JapTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Terraclimate data for Japan — JapTC","title":"Multivariate Terraclimate data for Japan — JapTC","text":"Historical (1960-1969) present (2008-2017) multivariate 1/24 Terraclimate data set (Abatzoglou et al. 2018), extracted Japanese archipelago including 3 variables: mean annual monthly precipitation (mm), maximum minimum temperatures (C).","code":""},{"path":"/reference/JapTC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multivariate Terraclimate data for Japan — JapTC","text":"raster stack 9 layers historical (1960-1969) current (2008-2017) average (AnMn) standard deviation (AnMnSD) mean annual (AnMn) precipitation (Ppr), maximum (Tmax) minimum (Tmin) temperature.","code":""},{"path":"/reference/JapTC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Multivariate Terraclimate data for Japan — JapTC","text":"Terraclimate data set.","code":""},{"path":"/reference/JapTC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multivariate Terraclimate data for Japan — JapTC","text":"Abatzoglou et al. 2018. Terraclimate, high-resolution global dataset monthly climate climatic water balance 1958-2015, Scientific Data, 5: 170191","code":""},{"path":"/reference/angulo.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal. Angle associated to the spatial gradient — angulo","title":"Internal. Angle associated to the spatial gradient — angulo","text":"Internal. Angle associated spatial gradient","code":""},{"path":"/reference/angulo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal. Angle associated to the spatial gradient — angulo","text":"","code":"angulo(dx, dy)"},{"path":"/reference/angulo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal. Angle associated to the spatial gradient — angulo","text":"dx numeric giving longitudinal gradient component dy numeric giving latitudinal gradient component","code":""},{"path":"/reference/angulo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal. Angle associated to the spatial gradient — angulo","text":"Jorge Garcia Molinos David S. Schoeman angulo()","code":""},{"path":"/reference/check_mirai_daemons.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for mirai daemons and provide a helpful message. — check_mirai_daemons","title":"Check for mirai daemons and provide a helpful message. — check_mirai_daemons","text":"utility function checks status `mirai` daemons. daemons found, prints user-friendly message explaining parallel processing active provides suggestion user launch .","code":""},{"path":"/reference/check_mirai_daemons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for mirai daemons and provide a helpful message. — check_mirai_daemons","text":"","code":"check_mirai_daemons()"},{"path":"/reference/check_mirai_daemons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for mirai daemons and provide a helpful message. — check_mirai_daemons","text":"NULL, invisibly. function called side effects.","code":""},{"path":"/reference/climPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce dimensionality of climate predictors via Principal Component Analysis — climPCA","title":"Reduce dimensionality of climate predictors via Principal Component Analysis — climPCA","text":"Function extract first n principal components explaining predefined total amount variance among climatic variables. components can subsequently used synthetic climatic variables reduce dimensionality climate-analogue methods.","code":""},{"path":"/reference/climPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce dimensionality of climate predictors via Principal Component Analysis — climPCA","text":"","code":"climPCA(   climp,   climf,   trans = function(x) log(x),   cen = TRUE,   sc = TRUE,   th = 0.8 )"},{"path":"/reference/climPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce dimensionality of climate predictors via Principal Component Analysis — climPCA","text":"climp raster.stack one layer climatic variable values present baseline conditions. climf raster.stack one layer climatic variable values future conditions. trans function specifying type transformation applied prior PCA. Specify NA transformation required (default log(x)). cen logical variables centered prior PCA? (default TRUE). sc logical variables scaled prior PCA? (default TRUE). th numeric threshold giving minimum amount total variance explained principal components extracted.","code":""},{"path":"/reference/climPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce dimensionality of climate predictors via Principal Component Analysis — climPCA","text":"list containing () output PCA (call 'prcomp'), (ii) table present/future cell values principal components accounting specified percentage total variance (th).","code":""},{"path":[]},{"path":"/reference/climPCA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reduce dimensionality of climate predictors via Principal Component Analysis — climPCA","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/climPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce dimensionality of climate predictors via Principal Component Analysis — climPCA","text":"","code":"if (FALSE) { # \\dontrun{ JapTC <- VoCC_get_data(\"JapTC.tif\")  comp <- climPCA(JapTC[[c(1, 3, 5)]], JapTC[[c(2, 4, 6)]],                 trans = NA, cen = TRUE, sc = TRUE, th = 0.85) summary(comp[[1]]) # first two components explain >90% of variance # Create a data frame with the necessary variables in the required order (see climAna? for details) clim <- comp[[2]][, c(2, 4, 3, 5, 1)] clim[, c(\"x\", \"y\")] <- terra::xyFromCell(JapTC[[1]], clim$cid) } # }"},{"path":"/reference/climPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Binned scatter plot for 2-dimensional climate space — climPlot","title":"Binned scatter plot for 2-dimensional climate space — climPlot","text":"Function create binned scatter plot two climate variables.","code":""},{"path":"/reference/climPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binned scatter plot for 2-dimensional climate space — climPlot","text":"","code":"climPlot(xy, x.binSize, y.binSize, x.name = \"V1\", y.name = \"V2\")"},{"path":"/reference/climPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binned scatter plot for 2-dimensional climate space — climPlot","text":"xy data.frame cells rows 4 columns representing present future local values two variables (V1p, V1f, V2p, V2f). x.binSize numeric bin size first variable. y.binSize numeric bin size second variable. x.name character variable name first variable. Used label plot. y.name character variable name second variable. Used label plot.","code":""},{"path":"/reference/climPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binned scatter plot for 2-dimensional climate space — climPlot","text":"series plot objects displaying () present (ii) future cell frequency combination local climates, (iii) location remnant, novel disappearing climates periods.","code":""},{"path":[]},{"path":"/reference/climPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Binned scatter plot for 2-dimensional climate space — climPlot","text":"Jorge Garcia Molinos Naoki H. Kumagai","code":""},{"path":"/reference/climPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binned scatter plot for 2-dimensional climate space — climPlot","text":"","code":"if (FALSE) { # \\dontrun{ JapTC <- VoCC_get_data(\"JapTC.tif\")  # Plot climate space for the two first variables(annual precipitation and maximum temperature) xy <- stats::na.omit(data.frame(   terra::values(JapTC[[1]]),   terra::values(JapTC[[2]]),   terra::values(JapTC[[3]]), terra::values(JapTC[[4]]) ))  out <- climPlot(xy,   x.binSize = 5, y.binSize = 0.2, x.name = \"Precipitation (mm)\",   y.name = \"Temperature max (°C)\" )  # output plots can be saved as: ggplot2::ggsave(   plot = out, filename = file.path(getwd(), \"example_plot.pdf\"),   width = 17, height = 17, unit = \"cm\" ) } # }"},{"path":"/reference/dVoCC.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance-based velocity based on geographically closest climate analogue — dVoCC","title":"Distance-based velocity based on geographically closest climate analogue — dVoCC","text":"Function calculate geographically closest climate analogues related distance-based velocity. Cell analogues identified comparing baseline climatic conditions focal cell existing (target) cells future reference specified climatic threshold. function allows specification search distances incorporates least-cost path Great Circle (--crow-flies) distances.","code":""},{"path":"/reference/dVoCC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance-based velocity based on geographically closest climate analogue — dVoCC","text":"","code":"dVoCC(   clim,   n,   tdiff,   method = \"Single\",   climTol,   geoTol,   distfun = \"GreatCircle\",   trans = NA,   lonlat = TRUE )"},{"path":"/reference/dVoCC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance-based velocity based on geographically closest climate analogue — dVoCC","text":"clim data.frame value climatic parameters (columns) cell (rows), arranged follows (see examples ): first 2n columns must contain present future values n climatic variables (V1p, V1f, V2p, V2f,...). cell-specific analogue thresholds (see \"variable\" \"method\" ) calculated, next (2n+1:3n) columns contain standard deviation (measure climatic variability) variable baseline period. columns required using \"Single\" method. last three columns table contain identifyier centroid coordinates cell. n integer defining number climatic variables. tdiff integer defining number years (temporal unit) periods. method character string specifying analogue method used. 'Single': constant, single analogue threshold climate variable applied cells (Ohlemuller et al. 2006, Hamann et al. 2015); climate analogy corresponds target cells values specified threshold climatic variable. 'Variable': cell-specific climate threshold used climatic variable determine climate analogues associated cell reference baseline climatic variability (Garcia Molinos et al. 2017). climTol numeric vector length n giving tolerance threshold defining climate analogue conditions climatic variable. cell-specific threshold used, function parameter passed NA. geoTol integer impose geographical distance threshold (km lat/lon map units projected). used, pool potential climate analogues limited cells within distance focal cell. distfun character string specifying function used estimating distances focal target cells. Either 'Euclidean', 'GreatCircle' (Great Circle Distances). 'LeastCost' (Least Cost Path Distances) CURRENTLY IMPLEMENTED. LeastCost requires transition matrix supplied function via de 'trans' argument. trans TransitionLayer CURRENTLY IMPLEMENTED gdistance object used analogue search distfun = 'LeastCost'. lonlat logical analysis done unprojected (lon/lat) coordinates?","code":""},{"path":"/reference/dVoCC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance-based velocity based on geographically closest climate analogue — dVoCC","text":"data.frame containing cell id future analogue focal cell (NA = analogue available), together climatic (\"climDis\") geographical (\"geoDis\") distances input units, bearing (\"ang\", degrees North), resulting climate velocity (\"vel\", km/yr). Mean climatic distances returned multivariate analogues.","code":""},{"path":"/reference/dVoCC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distance-based velocity based on geographically closest climate analogue — dVoCC","text":"Ohlemuller et al. 2006. Towards European climate risk surfaces: extent distribution analogous non-analogous climates 1931-2100. Global Ecology Biogeography, 15, 395-405. Hamann et al. 2015. Velocity climate change algorithms guiding conservation management. Global Change Biology, 21, 997-1004. Garcia Molinos et al. 2017. Improving interpretability climate landscape metrics: ecological risk analysis Japan's Marine Protected Areas. Global Change Biology, 23, 4440-4452.","code":""},{"path":[]},{"path":"/reference/dVoCC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Distance-based velocity based on geographically closest climate analogue — dVoCC","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/dVoCC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance-based velocity based on geographically closest climate analogue — dVoCC","text":"","code":"if (FALSE) { # \\dontrun{ JapTC <- VoCC_get_data(\"JapTC.tif\")  # Create a data frame with the necessary variables in the required order clim <- stats::na.omit(data.frame(terra::values(JapTC), cid = 1:terra::ncell(JapTC))) clim[, c(\"x\", \"y\")] <- terra::xyFromCell(JapTC, clim$cid)  # Constant threshold, distance-restricted velocity based on geographical distances avocc1 <- dVoCC(clim,   n = 3, tdiff = 40, method = \"Single\", climTol = c(10, 0.1, 0.1),   geoTol = 160, distfun = \"GreatCircle\", trans = NA, lonlat = TRUE )  r1 <- JapTC[[1]] r1[avocc1$focal] <- avocc1$vel terra::plot(r1)  # Cell-specific, distance-unrestricted climate analogue velocity based on least-cost path distances # First, create the conductance matrix (all land cells considered to have conductance of 1) r <- JapTC[[1]] r[!is.na(JapTC[[1]])] <- 1 h8 <- gdistance::transition(r, transitionFunction = mean, directions = 8) h8 <- gdistance::geoCorrection(h8, type = \"c\")  # Now calculate the analogue velocity using the baseline SD for each variable as analogue threshold avocc2 <- dVoCC(clim,   n = 3, tdiff = 40, method = \"Variable\", climTol = NA, geoTol = Inf,   distfun = \"LeastCost\", trans = h8, lonlat = TRUE )  # Plot results r1 <- r2 <- JapTC[[1]] r1[avocc1$focal] <- avocc1$vel r2[avocc2$focal] <- avocc2$vel terra::plot(c(r1, r2)) } # }"},{"path":"/reference/gVoCC.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient-based climate velocity — gVoCC","title":"Gradient-based climate velocity — gVoCC","text":"Function calculate velocity climate change Burrows et al. (2011) based local climatic temporal trends spatial gradients.","code":""},{"path":"/reference/gVoCC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient-based climate velocity — gVoCC","text":"","code":"gVoCC(tempTrend, spatGrad)"},{"path":"/reference/gVoCC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient-based climate velocity — gVoCC","text":"tempTrend output tempTrend function containing long-term linear climatic trends. spatGrad output spatGrad function containing magnitudes angles spatial climatic gradient.","code":""},{"path":"/reference/gVoCC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient-based climate velocity — gVoCC","text":"RasterStack containing climate velocity magnitude (\"voccMag\", km/yr unprojected rasters spatial unit/year projected rasters) angle(\"voccAng\" degrees north: 0N, 90E, 180S 270W).","code":""},{"path":"/reference/gVoCC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gradient-based climate velocity — gVoCC","text":"Burrows et al. 2011. pace shifting climate marine terrestrial ecosystems. Science, 334, 652-655.","code":""},{"path":[]},{"path":"/reference/gVoCC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gradient-based climate velocity — gVoCC","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/gVoCC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient-based climate velocity — gVoCC","text":"","code":"if (FALSE) { # \\dontrun{ HSST <- VoCC_get_data(\"HSST.tif\") yrSST <- sumSeries(HSST,   p = \"1960-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE), freqin = \"months\", freqout = \"years\" ) tr <- tempTrend(yrSST, th = 10) sg <- spatGrad(yrSST, th = 0.0001, projected = FALSE)  # Magnitude and angle of the climate velocity (km/yr) 1960-2009  v <- gVoCC(tr, sg) terra::plot(v) } # }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"/reference/resTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Climatic residence time of a polygon — resTime","title":"Climatic residence time of a polygon — resTime","text":"Function calculate VoCC-based residence time isotherms within polygon Loaire et al. (2009)","code":""},{"path":"/reference/resTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climatic residence time of a polygon — resTime","text":"","code":"resTime(pg, vel, areapg = NA)"},{"path":"/reference/resTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Climatic residence time of a polygon — resTime","text":"pg sf object terra::vect object containing polygons residence time calculated. polygons must coordinate system vel. vel raster climate velocity (km/year) period interest. areapg vector area (km2) polygons. Use NA (default) calculate internally field avilable.","code":""},{"path":"/reference/resTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Climatic residence time of a polygon — resTime","text":"data.frame containing polygon ID, mean velocity (km/yr), diameter equivalent circle (km), residence time (years) ratio D/vel.","code":""},{"path":"/reference/resTime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Climatic residence time of a polygon — resTime","text":"Loarie et al. 2009. velocity climate change. Nature, 462, 1052-1055.","code":""},{"path":[]},{"path":"/reference/resTime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Climatic residence time of a polygon — resTime","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/resTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Climatic residence time of a polygon — resTime","text":"","code":"# Load example Exclusive Economic Zone polygon if (FALSE) { # \\dontrun{ EEZ <- VoCC_get_data(\"EEZ.gpkg\") HSST <- VoCC_get_data(\"HSST.tif\")  yrSST <- sumSeries(HSST,   p = \"1969-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE),   freqin = \"months\", freqout = \"years\" ) tr <- tempTrend(yrSST, th = 10) sg <- spatGrad(yrSST, th = 0.0001, projected = FALSE) v <- gVoCC(tr, sg) vel <- v[[1]]  # Calculating area internally a1 <- resTime(EEZ, vel, areapg = NA) a1  # Using the area field from the polygon data table a2 <- resTime(EEZ, vel, areapg = as.numeric(as.numeric(levels(EEZ$Area_km2))[EEZ$Area_km2])) a2  # Using a user defined polygon x_coord <- c(-28, -20, -20.3, -25.5) y_coord <- c(60, 61, 63, 62) coords <- matrix(c(x_coord, y_coord), ncol = 2) poly_sf <- sf::st_sf(geometry = sf::st_sfc(sf::st_polygon(list(coords)))) a3 <- resTime(poly_sf, vel, areapg = NA)  terra::plot(vel) plot(sf::st_geometry(EEZ), add = TRUE) plot(sf::st_geometry(poly_sf), add = TRUE) } # }"},{"path":"/reference/shiftTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift in timing of seasonal climatology — shiftTime","title":"Shift in timing of seasonal climatology — shiftTime","text":"Function calculate seasonal shift arriving typical seasonal climates given period interest per Burrows et al. (2011).","code":""},{"path":"/reference/shiftTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift in timing of seasonal climatology — shiftTime","text":"","code":"shiftTime(r, yr1, yr2, yr0, th, m)"},{"path":"/reference/shiftTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift in timing of seasonal climatology — shiftTime","text":"r stack monthly values climatic variable period interest. yr1 integer specifying initial year period interest. yr2 integer specifying end year period interest. yr0 integer specifying first year series. th integer minimum number non NAs series needed calculate trend (default 3). m integer number (1-12) month shift calculated","code":""},{"path":"/reference/shiftTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift in timing of seasonal climatology — shiftTime","text":"stack long-term monthly trend (C/year temperature degrees; \"mTrend\"), seasonal rate change (C/month; \"seaRate\"), seasonal shift (day/decade; \"seaShift\").","code":""},{"path":"/reference/shiftTime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shift in timing of seasonal climatology — shiftTime","text":"Burrows et al. 2011. pace shifting climate marine terrestrial ecosystems. Science, 334, 652-655.","code":""},{"path":"/reference/shiftTime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shift in timing of seasonal climatology — shiftTime","text":"Jorge Garcia Molinos Michael T. Burrows","code":""},{"path":"/reference/shiftTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift in timing of seasonal climatology — shiftTime","text":"","code":"if (FALSE) { # \\dontrun{ HSST <- VoCC_get_data(\"HSST.tif\") Apr <- shiftTime(HSST, yr1 = 1960, yr2 = 2009, yr0 = 1955, th = 10, m = 4)  terra::plot(Apr) } # }"},{"path":"/reference/spatGrad.html","id":null,"dir":"Reference","previous_headings":"","what":"Local spatial climatic gradients — spatGrad","title":"Local spatial climatic gradients — spatGrad","text":"Function calculate magnitude direction spatial gradient associated climatic variable Burrows et al. (2011). trend used calculation gradient-based climate velocity using gVoCC.","code":""},{"path":"/reference/spatGrad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local spatial climatic gradients — spatGrad","text":"","code":"spatGrad(r, th = -Inf, projected = FALSE)"},{"path":"/reference/spatGrad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local spatial climatic gradients — spatGrad","text":"r RasterStack annual climatic values period interest. Alternatively, raster annual climatic values averaged period interest. th Integer indicating lower threshold truncate spatial gradient . Use -Inf (default) threshold required. projected Logical source raster projected coordinate system? FALSE (default) correction made account latitudinal distortion.","code":""},{"path":"/reference/spatGrad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local spatial climatic gradients — spatGrad","text":"RasterStack magnitude spatial gradient (Grad C per km unprojected rasters C per spatial unit projected rasters), associated angle (Ang degrees).","code":""},{"path":"/reference/spatGrad.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local spatial climatic gradients — spatGrad","text":"Burrows et al. 2011. pace shifting climate marine terrestrial ecosystems. Science, 334, 652-655.","code":""},{"path":[]},{"path":"/reference/spatGrad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local spatial climatic gradients — spatGrad","text":"Jorge Garcia Molinos, David S. Schoeman, Michael T. Burrows","code":""},{"path":"/reference/spatGrad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local spatial climatic gradients — spatGrad","text":"","code":"if (FALSE) { # \\dontrun{ HSST <- VoCC_get_data(\"HSST.tif\")  yrSST <- sumSeries(HSST,   p = \"1969-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE), freqin = \"months\", freqout = \"years\" )  # Spatial gradient (magnitude and angle) for the average mean annual SST.  sg <- spatGrad(yrSST, th = 0.0001, projected = FALSE)  terra::plot(sg) } # }"},{"path":"/reference/splitLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal. Split a line segment defined by points A-B into n parts — splitLine","title":"Internal. Split a line segment defined by points A-B into n parts — splitLine","text":"Internal. Split line segment defined points -B n parts","code":""},{"path":"/reference/splitLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal. Split a line segment defined by points A-B into n parts — splitLine","text":"","code":"splitLine(A, B, n)"},{"path":"/reference/splitLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal. Split a line segment defined by points A-B into n parts — splitLine","text":"numeric giving coordinates first point B numeric giving coordinates second point n numeric number segments divide distance points ","code":""},{"path":"/reference/splitLine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal. Split a line segment defined by points A-B into n parts — splitLine","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/sumSeries.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize climatic series to higher temporal resolution — sumSeries","title":"Summarize climatic series to higher temporal resolution — sumSeries","text":"Function convert climatic series (provided RasterStack) coarser time frequency series period interest. function transforms RasterStack xts time series object extract values period interest apply summary function. mainly wrapper apply. function family package xts (Ryan Ulrich 2017).","code":""},{"path":"/reference/sumSeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize climatic series to higher temporal resolution — sumSeries","text":"","code":"sumSeries(   r,   p,   yr0,   l = terra::nlyr(r),   fun = function(x) colMeans(x, na.rm = TRUE),   freqin = \"months\",   freqout = \"years\" )"},{"path":"/reference/sumSeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize climatic series to higher temporal resolution — sumSeries","text":"r RasterStack containing time series climatic variable. p character string defining period extract calculation series (see examples). yr0 character string specifying first (yr0) year series (see examples). l integer length input time series. fun logical summary function computed. Summary functions need applied cell (columns) structure 'function(x) apply(x, 2, function(y))'. convenience, sumSeries imports colMaxs, colMins package ‘matrixStats’ (Bengtsson 2018) can called directly. freqin character string specifying original time frequency series. freqout character string specifying desired time frequency new series. Must one following: \"weeks\", \"months\", \"quarters\", \"years\", \"\". Argument \"\" allows user-defined functions applied 'xts' time series object period interest (see examples).","code":""},{"path":"/reference/sumSeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize climatic series to higher temporal resolution — sumSeries","text":"RasterStack new series.","code":""},{"path":"/reference/sumSeries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize climatic series to higher temporal resolution — sumSeries","text":"Ray Ulrich. 2017. xts: eXtensible Time Series. R package version 0.10-1. Bengtsson 2018. matrixStats: Functions Apply Rows Columns Matrices (Vectors). R package version 0.53.1.","code":""},{"path":"/reference/sumSeries.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize climatic series to higher temporal resolution — sumSeries","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/sumSeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize climatic series to higher temporal resolution — sumSeries","text":"","code":"if (FALSE) { # \\dontrun{ # Monthly mean SST (HadISST) data for Europe Jan-1950 to Dec-2010  HSST <- VoCC_get_data(\"HSST.tif\")  # Calculate mean annual monthly SST  yrSST <- sumSeries(HSST,   p = \"1969-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE), freqin = \"months\", freqout = \"years\" )  # Extract Jul Aug mean SST each year (xts months are indexed from 0 to 11)  myf <- function(x, m = c(7, 8)) {   x[xts::.indexmon(x) %in% (m - 1)] }  JlAugSST <- sumSeries(HSST,   p = \"1969-01/2009-12\", yr0 = \"1950-01-01\", l = terra::nlyr(HSST),   fun = myf, freqin = \"months\", freqout = \"other\" )  # Same but calculating the annual variance of the two months  myf <- function(x, m = c(7, 8)) {   x1 <- x[xts::.indexmon(x) %in% (m - 1)]   xts::apply.yearly(x1, function(y) {     apply(y, 2, function(y) {       var(y, na.rm = TRUE)     })   }) }  meanJASST <- sumSeries(HSST,   p = \"1969-01/2009-12\", yr0 = \"1950-01-01\", l = terra::nlyr(HSST),   fun = myf, freqin = \"months\", freqout = \"other\" ) } # }"},{"path":"/reference/tempTrend.html","id":null,"dir":"Reference","previous_headings":"","what":"Long-term local climatic trends — tempTrend","title":"Long-term local climatic trends — tempTrend","text":"Function calculate temporal trend raster series climatic variable. trend used calculation gradient-based climate velocity using gVoCC.","code":""},{"path":"/reference/tempTrend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Long-term local climatic trends — tempTrend","text":"","code":"tempTrend(r, th)"},{"path":"/reference/tempTrend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Long-term local climatic trends — tempTrend","text":"r RasterStack containing time series (annual, seasonal, monthly...) values climatic variable period interest. th Integer minimum number observations series needed calculate trend cell.","code":""},{"path":"/reference/tempTrend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Long-term local climatic trends — tempTrend","text":"RasterStack containing cell-specific temporal trends extracted simple linear regressions climatic variable time (\"slpTrends\" degree Celsius per year), together standard errors (\"seTrends\") statistical significance (\"sigTrends\").","code":""},{"path":[]},{"path":"/reference/tempTrend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Long-term local climatic trends — tempTrend","text":"Jorge Garcia Molinos Christopher J. Brown","code":""},{"path":"/reference/tempTrend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Long-term local climatic trends — tempTrend","text":"","code":"if (FALSE) { # \\dontrun{ HSST <- VoCC_get_data(\"HSST.tif\")  yrSST <- sumSeries(HSST,   p = \"1969-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE), freqin = \"months\", freqout = \"years\" )  # Mean annual SST trend (minimum threshold of 10 years of data), with SE and p-values.  tr <- tempTrend(yrSST, th = 10)  terra::plot(tr) } # }"},{"path":"/reference/trajClas.html","id":null,"dir":"Reference","previous_headings":"","what":"Climate velocity trajectory classification — trajClas","title":"Climate velocity trajectory classification — trajClas","text":"Function spatial classification cells based VoCC trajectories Burrows et al. (2014). function performs hierarchical sequential classification based length trajectories, geographical features, relative abundance trajectories ending , starting flowing cell. Essentially, cells first classified non-moving, slow-moving fast-moving relative distance trajectory cover projection period based local climate velocities. Two types climate sinks identified among fast-moving cells: () boundary (e.g., coastal) cells disconnected cooler (warmer) neighbouring cells locally warming (cooling) climate, (ii) locations endorheic spatial gradients velocity angles neighbouring cells converge towards central point intersection. Finally, remaining cells classified reference total number trajectories per cell based proportions number trajectories starting (Nst), ending (Nend), flowing (NFT) cell period. Based proportions, cells classified five classes: (1) climate sources, trajectories end cell (Nend = 0); (2) relative climate sinks, relative number trajectories ending cell high proportion starting trajectories low; (3) corridors cells high proportion trajectories passing ; (4) divergence (5) convergence cells identified remaining cells fewer/trajectories ended started cell, respectively.","code":""},{"path":"/reference/trajClas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climate velocity trajectory classification — trajClas","text":"","code":"trajClas(   traj,   vel,   ang,   mn,   trajSt,   tyr,   nmL,   smL,   Nend,   Nst,   NFT,   DateLine = FALSE )"},{"path":"/reference/trajClas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Climate velocity trajectory classification — trajClas","text":"traj data.frame retuned voccTraj containing coordinates identification number trajectory. vel SpatRaster magnitude gradient-based climate velocity. ang SpatRaster velocity angles. mn SpatRaster mean climatic values study period. trajSt integer number trajectories starting cell spatial unit. tyr integer number years comprising projected period. nmL numeric upper threshold (distance units per vel object) trajectory considered traveled negligible distance study period (non-moving). smL numeric upper threshold trajectory considered traveled small distance study period (slow-moving). Nend numeric percentage trajectories ending used threshold classification. Nst numeric percentage trajectories starting used threshold classification. NFT numeric percentage trajectories flowing used threshold classification. DateLine logical raster extent cross international date line? (default \"FALSE\").","code":""},{"path":"/reference/trajClas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Climate velocity trajectory classification — trajClas","text":"SpatRaster containing trajectory classification (\"TrajClas\"), well based trajectory length (\"ClassL\"; 1 non-moving, 2 slow-moving, 3 fast-moving cells), boundrary (\"BounS\") internal sinks (\"IntS\"), proportion trajectories ending(\"PropEnd\"), flowing (\"PropFT\") starting (\"PropSt\"). trajectory classes (\"TrajClas\") (1) non-moving, (2) slow-moving, (3) internal sinks, (4) boundary sinks, (5) sources, (6) relative sinks, (7) corridors, (8) divergence (9) convergence.","code":""},{"path":"/reference/trajClas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Climate velocity trajectory classification — trajClas","text":"Burrows et al. 2014. Geographical limits species-range shifts suggested climate velocity. Nature, 507, 492-495.","code":""},{"path":[]},{"path":"/reference/trajClas.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Climate velocity trajectory classification — trajClas","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/trajClas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Climate velocity trajectory classification — trajClas","text":"","code":"if (FALSE) { # \\dontrun{ HSST <- VoCC_get_data(\"HSST.tif\")  # input raster layers yrSST <- sumSeries(HSST,   p = \"1960-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE), freqin = \"months\", freqout = \"years\" )  mn <- terra::mean(yrSST, na.rm = TRUE) tr <- tempTrend(yrSST, th = 10) sg <- spatGrad(yrSST, th = 0.0001, projected = FALSE) v <- gVoCC(tr, sg) vel <- v[[1]] ang <- v[[2]]  # Get the set of starting cells for the trajectories and calculate trajectories # at 1/4-deg resolution (16 trajectories per 1-deg cell) mnd <- terra::disagg(mn, 4) veld <- terra::disagg(vel, 4) angd <- terra::disagg(ang, 4) lonlat <- stats::na.omit(data.frame(   terra::xyFromCell(veld, 1:terra::ncell(veld)),   terra::values(veld), terra::values(angd), terra::values(mnd) ))[, 1:2]  traj <- voccTraj(lonlat, vel, ang, mn, tyr = 50, correct = TRUE)  # Generate the trajectory-based classification clas <- trajClas(traj, vel, ang, mn,   trajSt = 16, tyr = 50, nmL = 20, smL = 100,   Nend = 45, Nst = 15, NFT = 70, DateLine = FALSE )  # Define first the colour palette for the full set of categories my_col <- c(   \"gainsboro\", \"darkseagreen1\", \"coral4\", \"firebrick2\", \"mediumblue\", \"darkorange1\",   \"magenta1\", \"cadetblue1\", \"yellow1\" ) # Keep only the categories present in our raster my_col <- my_col[sort(unique(terra::values(clas[[7]])))]  # Classify raster / build attribute table clasr <- terra::as.factor(clas[[7]]) rat_r <- data.frame(ID = sort(unique(terra::values(clas[[7]]))),                     trajcat = c(\"N-M\", \"S-M\", \"IS\", \"BS\", \"Srce\",                                \"RS\", \"Cor\", \"Div\", \"Con\")[sort(unique(terra::values(clas[[7]])))]) terra::cats(clasr) <- rat_r # Produce the plot using the rasterVis levelplot function rasterVis::levelplot(clasr,   col.regions = my_col,   xlab = NULL, ylab = NULL, scales = list(draw = FALSE) ) } # }"},{"path":"/reference/trajLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Climate velocity trajectory spatial lines — trajLine","title":"Climate velocity trajectory spatial lines — trajLine","text":"Create spatial line data frame object trajectory points.","code":""},{"path":"/reference/trajLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climate velocity trajectory spatial lines — trajLine","text":"","code":"trajLine(x, projx = \"EPSG:4326\")"},{"path":"/reference/trajLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Climate velocity trajectory spatial lines — trajLine","text":"x data.frame containing coordinates (x, y) constituent points identification number (trajIDs) trajectory returned VoCCTraj. projx CRS detailing coordinate reference system input data (default geographic CRS).","code":""},{"path":"/reference/trajLine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Climate velocity trajectory spatial lines — trajLine","text":"sf object one line per trajectory specified x. avoid artifacts, trajectories crossing date line need split two segments. trajectory one side date line composed single point, trajectory displayed (line object created). function assumes -180 180 longitudinal arrangement.","code":""},{"path":[]},{"path":"/reference/trajLine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Climate velocity trajectory spatial lines — trajLine","text":"Jorge Garcia Molinos","code":""},{"path":"/reference/trajLine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Climate velocity trajectory spatial lines — trajLine","text":"","code":"if (FALSE) { # \\dontrun{ HSST <- VoCC_get_data(\"HSST.tif\")  yrSST <- sumSeries(HSST,   p = \"1969-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE), freqin = \"months\", freqout = \"years\" ) tr <- tempTrend(yrSST, th = 10) sg <- spatGrad(yrSST, th = 0.0001, projected = FALSE) v <- gVoCC(tr, sg) vel <- v[[1]] ang <- v[[2]]  # calculate the annual SST mean over the period mn <- terra::mean(yrSST, na.rm = TRUE)  # get the set of starting cells for the trajectories lonlat <- stats::na.omit(data.frame(   terra::xyFromCell(vel, 1:terra::ncell(vel)),   vel[], ang[], mn[] ))[, 1:2]  # Calculate trajectories. traj <- voccTraj(lonlat, vel, ang, mn, tyr = 50, correct = TRUE)  # create a spatial line data frame from traj lns <- trajLine(x = traj) terra::plot(mn) terra::plot(lns, add = TRUE)  # Export as ESRI shape file terra::writeVector(lns, filename = \"velTraj\", filetype = \"ESRI Shapefile\") } # }"},{"path":"/reference/voccTraj.html","id":null,"dir":"Reference","previous_headings":"","what":"Climate velocity trajectories — voccTraj","title":"Climate velocity trajectories — voccTraj","text":"Function calculate vocc trajectories Burrows et al (2014). Trajectories calculated propagating climatic isopleths using magnitude direction local (cell) velocities. slightly modified version original Burrows et al. (2014) approach iterations trajectory based cumulative time traveled instead using fixed time steps.","code":""},{"path":"/reference/voccTraj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climate velocity trajectories — voccTraj","text":"","code":"voccTraj(   lonlat,   vel,   ang,   mn,   x_res,   y_res,   tstep,   tyr = 20,   bfr = 75,   grid_resolution = \"coarse\" )"},{"path":"/reference/voccTraj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Climate velocity trajectories — voccTraj","text":"lonlat data.frame longitude latitude (decimal degrees) points project. vel raster magnitude gradient-based climate velocity. ang raster velocity angles degrees. mn raster overall mean climatic value period interest. x_res Numeric. Resolution grid longitude direction (degrees km). y_res Numeric. Resolution grid latitude direction (degrees km). tstep Numeric. Timestep trajectory iteration (usually decimal year). tyr Integer. Temporal length period interest (years). grid_resolution Character. \"coarse\" (default) \"fine\". Controls land crossings handled allows higher resolution grids.","code":""},{"path":"/reference/voccTraj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Climate velocity trajectories — voccTraj","text":"tibble containing coordinates (\"lon\", \"lat\") constituent points, time step (\"Steps\"), identification number (\"ID\") trajectory, cell IDs start end cells.","code":""},{"path":"/reference/voccTraj.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Climate velocity trajectories — voccTraj","text":"Burrows et al. 2014. Geographical limits species-range shifts suggested climate velocity. Nature, 507, 492-495.","code":""},{"path":[]},{"path":"/reference/voccTraj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Climate velocity trajectories — voccTraj","text":"Jorge Garcia Molinos, David S. Schoeman Michael T. Burrows","code":""},{"path":"/reference/voccTraj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Climate velocity trajectories — voccTraj","text":"","code":"if (FALSE) { # \\dontrun{ yrSST <- sumSeries(HSST,   p = \"1960-01/2009-12\", yr0 = \"1955-01-01\", l = terra::nlyr(HSST),   fun = function(x) colMeans(x, na.rm = TRUE),   freqin = \"months\", freqout = \"years\" )  # Long-term local climatic trends tr <- tempTrend(yrSST, th = 10)  # Local spatial climatic gradients sg <- spatGrad(yrSST, th = 0.0001, projected = FALSE)  # Gradient-based climate velocity v <- gVoCC(tr, sg) vel <- v[[1]] ang <- v[[2]]  # Calculate the annual SST mean over the period mn <- terra::mean(yrSST, na.rm = TRUE)  # Get the set of starting cells for the trajectories lonlat <- stats::na.omit(data.frame(   terra::xyFromCell(vel, 1:terra::ncell(vel)),   vel[], ang[], mn[] ))[, 1:2]  # Calculate trajectories # The following throws an error due to the trajectories moving beyond the raster extent traj <- voccTraj(lonlat, vel, ang, mn, tyr = 50)  # This accounts for the extent issue traj <- voccTraj(lonlat, vel, ang, mn, tyr = 50, correct = TRUE) } # }"}]
